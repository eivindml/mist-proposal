"use strict";
const path_1 = require('path');
const child_process_1 = require('child_process');
const fs_1 = require('fs');
const monolite_1 = require('monolite');
const tmp_1 = require('tmp');
const through = require('through2');
const createChildEnv = (texInputs = []) => monolite_1.set(process.env, _ => _.TEXINPUTS)((TEXINPUTS = '') => [
    ...texInputs.map(path => path_1.resolve(process.cwd(), path)),
    ...TEXINPUTS.split(':')
]
    .join(':'));
const createTempDirectory = () => new Promise((resolve, reject) => tmp_1.dir((err, path) => err ? reject(err) : resolve(path)));
const pdflatex = (source, options) => {
    const result = through();
    createTempDirectory()
        .then(tempPath => {
        const command = child_process_1.spawn('pdflatex', [
            ...(options.shellEscape ? ['-shell-escape'] : []),
            '-halt-on-error',
            `-output-directory=${tempPath}`
        ], {
            cwd: tempPath,
            env: createChildEnv(options.texInputs)
        });
        source.pipe(command.stdin);
        command.stdout.pipe(through());
        command.on('exit', code => code === 0 ?
            fs_1.createReadStream(path_1.join(tempPath, 'texput.pdf')).pipe(result)
            : result.emit('error', 'Error during LaTeX compilation'));
    });
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = pdflatex;
//# sourceMappingURL=index.js.map
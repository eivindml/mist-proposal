export declare type Target = string | number | boolean | {} | any[] | undefined | null;
export declare const set: <R, T extends Target>(root: R, accessor: (x: R) => T) => (value: T | ((_: T) => T)) => R;
export declare const setMap: <R, T extends Target>(root: R, accessor: (x: R) => T[]) => (callback: (_: T) => T) => R;
export declare const setAppend: <R, T extends Target>(root: R, accessor: (x: R) => T[]) => (item: T) => R;
export declare const setPrepend: <R, T extends Target>(root: R, accessor: (x: R) => T[]) => (item: T) => R;

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.setPrepend = exports.setAppend = exports.setMap = exports.set = undefined;

var _accessorChain = require('./accessorChain');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var setFromAccessorChain = function setFromAccessorChain(root, accessorChain) {
    return function (value) {
        if (accessorChain.length === 0) {
            if (value instanceof Function) return value(root);else return value;
        } else {
            var node = root;
            var key = accessorChain.shift();
            return Object.assign({}, node, _defineProperty({}, key, setFromAccessorChain(node[key], accessorChain)(value)));
        }
    };
};
var set = exports.set = function set(root, accessor) {
    return setFromAccessorChain(root, (0, _accessorChain.getAccessorChain)(accessor));
};
var setMap = exports.setMap = function setMap(root, accessor) {
    return function (callback) {
        return set(root, accessor)(function (arr) {
            return arr.map(function (value) {
                return callback(value);
            });
        });
    };
};
var setAppend = exports.setAppend = function setAppend(root, accessor) {
    return function (item) {
        return set(root, accessor)(function (arr) {
            return [].concat(_toConsumableArray(arr), [item]);
        });
    };
};
var setPrepend = exports.setPrepend = function setPrepend(root, accessor) {
    return function (item) {
        return set(root, accessor)(function (arr) {
            return [item].concat(_toConsumableArray(arr));
        });
    };
};